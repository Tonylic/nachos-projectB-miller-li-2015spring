/** 
 * Create a new file on the fs for the user with the name stored at
 * the virtual address specified in addr that is size bytes long.
 * 
 * Returns 0 on success.
 */
void
Create_Syscall_Func( unsigned int addr )
{	
	char *buf = currentThread->space->read( addr, 0 );
	if( buf == NULL ) { printf("Failed to alloc buffer in create_syscall\n."); }
	
	/* tell the FS to make the file */
	fileSystem->Create( buf, 0 );
	DEBUG( 's', "Created file: %s requested by userprog\n" );

	return;
} // create_syscall_func

/**
 * Open a file specified by the name pointed to by the address addr that is 
 * size bytes long. If successful the file is stored into the executing processes
 * adress space's file table and the ID is returned for later reference.
 * 
 * The NachOS FS presented does not appear to have support (at least a way to 
 * interface with the FS in a way that does) for file permissions currently.
 * We have assumed that all files will inherently have the required permissions
 * when it is attempted to open() it.
 * 
 * On an error -1 is returned.
 */
int
Open_Syscall_Func( unsigned int addr )
{
	OpenFile *file;
	int fd;
	
	/* error  check */
	char *buf = currentThread->space->read( addr, 0 );
	if( buf == NULL ) { printf("Failed to alloc buffer in open_syscall\n."); }
	
	
	/* tell the FS to open it up */
	file = fileSystem->Open( buf );
	
	
	if( file )
	{
		/* put it on the threads table */
		if( ( fd = currentThread->space->open_files.fd_put( file )) == -1 )
			delete file;
		DEBUG( 's', "Opened file: %s requested by userprog\n" );
		return fd;
	}
	else
	{
		return -1;
	}
	
	
} // open_syscall_func

/**
 * Accessing the memory at location virt_addr, reading the data to be written
 * Copy it into a buffer then write the contents of that buffer to the file 
 * specified in ID; if ID is stdin (ConsoleInput in NachOS) it is an error.
 *
 * Returns -1 on error and the amount of characters written otherwise.
 */
int
Write_Syscall_Func( unsigned int addr, int size, int fd )
{
	
	OpenFile *file;
	
	/* invalid fd */
	if( fd < 0 )
	{
		return -1;
	}
	
	/* stdin = error */
	if( fd == ConsoleInput )
	{
		printf( "You cannot write to stdin!\n" );
		return -1;
	}
	
	/* error  check */
	char *buf = currentThread->space->read( addr, size );
	if( buf == NULL )
	{
		printf( "Failed to alloc buffer in write_syscall\n."); 
		return -1;
	}
	
	/* output to console .. 
		NOTE: may need to be updated when/if SynchConsole is implemented */
	if( fd == ConsoleOutput )
	{
		int count;
		for( count = 0; count < size; ++count )
		{
			printf("%c", buf[ count ] ); // write to stdout directly
		}
		return count;
	}
	/* write to the file specified if not stdout */
	else
	{
		/* check if we have the fd open */
		file = (OpenFile*) currentThread->space->open_files.fd_get( fd );
		if( file ) // not null, etc
		{
			int temp = file->Write( buf, size );			
			return temp;
		}
		else
		{
			printf( "Failed to write to file in write syscall (bad id).\n" );
			return -1;
		}
	}
} // write_syscall_func

/**
 * Read data into the buffer pointed at by virt_addr from the file
 * specified by fd (at most size bytes).
 * 
 * The function will check and return an error if the file is not open.
 * 
 * Return -1 on error and the bytes read on success.
 */
int
Read_Syscall_Func( unsigned int addr, int size, int fd )
{
	char *buf;
	OpenFile *file;
	int res = 0;
	buf = new char[ size ];
	
	/* checking errors */
	if( fd == ConsoleOutput )
	{
		printf( "You cannot read from stdout!\n" );
		return -1;
	}
	if( buf == NULL )
	{
		printf( "Error allocating buffer in read syscall.\n" );
	}
	
	/* read from stdin..
		NOTE: may require modification when SynchConsole comes into play */
	if( fd == ConsoleInput )
	{
		scanf( "%s", buf );
		
		/* copy into memory for user */
		currentThread->space->write( addr, buf, size );
		/* we could have written less than size ... */
		int str_len = strlen( buf );
		delete[] buf;
		return str_len-1;
	}
	/* read from file */
	else
	{
		file = (OpenFile *) currentThread->space->open_files.fd_get( fd );
		if( file )
		{
			int read_size = file->Read( buf, size );
			if( read_size > 0 )
			{
				currentThread->space->write( addr, buf, size );
				delete[] buf;
				return read_size;
			}
			else if( read_size == 0 )
			{
				// NOTE: should be removed before production?
				printf( "Did not read any data on read()\n." );
				delete[] buf;
				return read_size;
			}
		}
		else
		{
			printf( "Bad id, failed to read from file.\n" );
			delete[] buf;
			return -1;
		}
	}
	return -1; // this should be an error if we get here
}

/**
 * On success closes the FD specified, on failure does nothing.
 * There is no error correction, if the file isnt open nothing happens;
 * in any case there is no return value.
 */
void
Close_Syscall_Func( int fd )
{
	OpenFile *file = (OpenFile *)NULL;
	file = (OpenFile *)currentThread->space->open_files.fd_remove( fd );
	
	if( file )
	{
		delete file;
	}
	else
	{
		printf( "Tried to close a file that has not been opened by the current process.\n" );
	}
} // close syscall
